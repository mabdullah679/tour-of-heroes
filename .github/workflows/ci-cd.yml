name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
    tags-ignore:
      - "**.*"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t halludbam/angular-heroes-app:${{ github.sha }} .
          docker tag halludbam/angular-heroes-app:${{ github.sha }} halludbam/angular-heroes-app:latest
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push halludbam/angular-heroes-app:${{ github.sha }}
          docker push halludbam/angular-heroes-app:latest

      # Step 4: Stop and Remove Existing Container (if any) on the Runner
      - name: Stop and Remove Existing Container
        run: |
          EXISTING_CONTAINER=$(docker ps -q -f name=angular-heroes-app)
          if [ ! -z "$EXISTING_CONTAINER" ]; then
            docker stop $EXISTING_CONTAINER && docker rm $EXISTING_CONTAINER
          fi

      # Step 5: Run the New Docker Container on the Runner
      - name: Run the New Docker Container
        run: |
          docker run -d --name angular-heroes-app -p 80:80 halludbam/angular-heroes-app:latest

      # Step 6: Reload Nginx (if applicable)
      - name: Reload Nginx
        run: |
          CONTAINER_ID=$(docker ps -qf "name=angular-heroes-app")
          docker exec $CONTAINER_ID nginx -s reload

      # Step 7: Set up Terraform and Deploy to AWS
      - name: Setup Terraform
        # This action installs a specified version of Terraform (defaults to latest if not specified)
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2  # or whichever region youâ€™re using

      - name: Terraform Plan
        run: terraform plan -input=false -var="commit_sha=${{ github.sha }}"        
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var="commit_sha=${{ github.sha }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
